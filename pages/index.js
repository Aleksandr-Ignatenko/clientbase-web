// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ö—É–∫–∏ React –∏ –∫–ª–∏–µ–Ω—Ç Supabase
import { useState, useEffect } from "react";
import { createClient } from "@supabase/supabase-js";

// –ü–æ–¥–∫–ª—é—á–∞–µ–º Supabase —Å –ø–æ–º–æ—â—å—é –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
);

// –ì–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç CRM
export default function CRM() {
  // –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤
  const [clients, setClients] = useState([]);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã
  const [form, setForm] = useState({
    full_name: "",
    email: "",
    countryCode: "+7", // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –†–æ—Å—Å–∏—è
    phone: "",
    company: "",
    notes: "",
  });

  // –§–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞
  const [loading, setLoading] = useState(false);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  useEffect(() => {
    fetchClients();
  }, []);

  // === –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ Supabase ===
  async function fetchClients() {
    const { data, error } = await supabase
      .from("CRM")
      .select("*")
      .order("created_at", { ascending: false });

    if (error) console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ:", error);
    else setClients(data);
  }

  // === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ ===
  async function addClient() {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ email –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (form.email && !emailRegex.test(form.email)) {
      alert("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email");
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
    const phoneRegex = /^[0-9]+$/;
    if (!phoneRegex.test(form.phone)) {
      alert("–¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã");
      return;
    }

    // –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    const fullPhone = `${form.countryCode}${form.phone}`;

    setLoading(true);

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ Supabase
    const { error } = await supabase.from("CRM").insert([
      {
        full_name: form.full_name,
        email: form.email,
        phone: fullPhone,
        company: form.company,
        notes: form.notes,
      },
    ]);

    setLoading(false);

    if (error) {
      alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏: " + error.message);
    } else {
      // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
      setForm({
        full_name: "",
        email: "",
        countryCode: "+7",
        phone: "",
        company: "",
        notes: "",
      });
      fetchClients(); // –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
    }
  }

  // === –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ ===
  async function deleteClient(id) {
    if (!confirm("–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞?")) return;
    const { error } = await supabase.from("CRM").delete().eq("id", id);
    if (error) alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: " + error.message);
    else fetchClients();
  }

  // === –†–µ–Ω–¥–µ—Ä –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ===
  return (
    <div
      style={{
        fontFamily: "sans-serif",
        maxWidth: 800,
        margin: "40px auto",
        background: "#f5f5f5",
        padding: "20px",
        borderRadius: "10px",
      }}
    >
      <h1 style={{ textAlign: "center" }}>CRM ‚Äî –ö–ª–∏–µ–Ω—Ç—ã</h1>

      {/* === –§–û–†–ú–ê –î–û–ë–ê–í–õ–ï–ù–ò–Ø === */}
      <div
        style={{
          marginBottom: 30,
          display: "flex",
          flexDirection: "column",
          gap: "8px",
        }}
      >
        {/* –ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ */}
        <input
          placeholder="–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞"
          value={form.full_name}
          onChange={(e) => setForm({ ...form, full_name: e.target.value })}
        />

        {/* Email —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∏ –ø–æ—Ç–µ—Ä–µ —Ñ–æ–∫—É—Å–∞ */}
        <input
          placeholder="Email"
          value={form.email}
          onChange={(e) => setForm({ ...form, email: e.target.value })}
          onBlur={() => {
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            if (form.email && !emailRegex.test(form.email)) {
              alert("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email");
            }
          }}
        />

        {/* –¢–µ–ª–µ—Ñ–æ–Ω + –≤—ã–±–æ—Ä –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã */}
        <div style={{ display: "flex", gap: "8px" }}>
          <select
            style={{ width: "90px" }}
            value={form.countryCode}
            onChange={(e) => setForm({ ...form, countryCode: e.target.value })}
          >
            <option value="+1">üá∫üá∏ +1</option>
            <option value="+7">üá∑üá∫ +7</option>
            <option value="+598">üá∫üáæ +598</option>
            <option value="+44">üá¨üáß +44</option>
            <option value="+49">üá©üá™ +49</option>
          </select>

          <input
            placeholder="–¢–µ–ª–µ—Ñ–æ–Ω"
            value={form.phone}
            onChange={(e) =>
              setForm({
                ...form,
                phone: e.target.value.replace(/\D/g, ""), // —É–¥–∞–ª—è–µ–º –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
              })
            }
          />
        </div>

        {/* –ö–æ–º–ø–∞–Ω–∏—è */}
        <input
          placeholder="–ö–æ–º–ø–∞–Ω–∏—è"
          value={form.company}
          onChange={(e) => setForm({ ...form, company: e.target.value })}
        />

        {/* –ó–∞–º–µ—Ç–∫–∏ */}
        <input
          placeholder="–ó–∞–º–µ—Ç–∫–∏"
          value={form.notes}
          onChange={(e) => setForm({ ...form, notes: e.target.value })}
        />

        {/* –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è */}
        <button onClick={addClient} disabled={loading}>
          {loading ? "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ..." : "–î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞"}
        </button>
      </div>

      {/* === –¢–ê–ë–õ–ò–¶–ê –ö–õ–ò–ï–ù–¢–û–í === */}
      <table
        border="1"
        cellPadding="6"
        style={{
          width: "100%",
          borderCollapse: "collapse",
          backgroundColor: "white",
        }}
      >
        <thead>
          <tr>
            <th>–ò–º—è</th>
            <th>Email</th>
            <th>–¢–µ–ª–µ—Ñ–æ–Ω</th>
            <th>–ö–æ–º–ø–∞–Ω–∏—è</th>
            <th>–ó–∞–º–µ—Ç–∫–∏</th>
            <th></th>
          </tr>
        </thead>
        <tbody>
          {clients.length === 0 && (
            <tr>
              <td colSpan="6" style={{ textAlign: "center" }}>
                –ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤
              </td>
            </tr>
          )}
          {clients.map((c) => (
            <tr key={c.id}>
              <td>{c.full_name}</td>
              <td>{c.email}</td>
              <td>{c.phone}</td>
              <td>{c.company}</td>
              <td>{c.notes}</td>
              <td>
                <button onClick={() => deleteClient(c.id)}>–£–¥–∞–ª–∏—Ç—å</button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>

      {/* –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è */}
      <button
        style={{
          marginTop: 20,
          display: "block",
          marginLeft: "auto",
          marginRight: "auto",
        }}
        onClick={fetchClients}
      >
        –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫
      </button>
    </div>
  );
}
