// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ö—É–∫–∏ React –∏ –∫–ª–∏–µ–Ω—Ç Supabase
import { useState, useEffect } from "react";
import { createClient } from "@supabase/supabase-js";
import { Auth } from "@supabase/auth-ui-react";
import { ThemeSupa } from "@supabase/auth-ui-shared";

// –ü–æ–¥–∫–ª—é—á–∞–µ–º Supabase —Å –ø–æ–º–æ—â—å—é –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
);

// –ì–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç CRM
export default function CRM() {
  // --- –°–æ—Å—Ç–æ—è–Ω–∏—è ---
  const [session, setSession] = useState(null);
    // –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤
  const [clients, setClients] = useState([]); 
  const [loading, setLoading] = useState(false);
  const [editingId, setEditingId] = useState(null);

  // –§–æ—Ä–º–∞ –∫–ª–∏–µ–Ω—Ç–∞
  const [form, setForm] = useState({
    full_name: "",
    email: "",
    countryCode: "+7",
    phone: "",
    company: "",
    notes: "",
  });

  // --- –°–ø–∏—Å–æ–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤ ---
  const countryCodes = [
    { code: "+1", country: "üá∫üá∏ –°–®–ê/–ö–∞–Ω–∞–¥–∞" },
    { code: "+7", country: "üá∑üá∫ –†–æ—Å—Å–∏—è/–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω" },
    { code: "+44", country: "üá¨üáß –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è" },
    { code: "+49", country: "üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è" },
    { code: "+33", country: "üá´üá∑ –§—Ä–∞–Ω—Ü–∏—è" },
    { code: "+39", country: "üáÆüáπ –ò—Ç–∞–ª–∏—è" },
    { code: "+34", country: "üá™üá∏ –ò—Å–ø–∞–Ω–∏—è" },
    { code: "+81", country: "üáØüáµ –Ø–ø–æ–Ω–∏—è" },
    { code: "+86", country: "üá®üá≥ –ö–∏—Ç–∞–π" },
    { code: "+91", country: "üáÆüá≥ –ò–Ω–¥–∏—è" },
    { code: "+55", country: "üáßüá∑ –ë—Ä–∞–∑–∏–ª–∏—è" },
    { code: "+61", country: "üá¶üá∫ –ê–≤—Å—Ç—Ä–∞–ª–∏—è" },
    { code: "+598", country: "üá∫üáæ –£—Ä—É–≥–≤–∞–π" },
    { code: "+380", country: "üá∫üá¶ –£–∫—Ä–∞–∏–Ω–∞" },
    { code: "+375", country: "üáßüáæ –ë–µ–ª–∞—Ä—É—Å—å" },
    { code: "+994", country: "üá¶üáø –ê–∑–µ—Ä–±–∞–π–¥–∂–∞–Ω" },
    { code: "+996", country: "üá∞üá¨ –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω" },
    { code: "+998", country: "üá∫üáø –£–∑–±–µ–∫–∏—Å—Ç–∞–Ω" },
    { code: "+90", country: "üáπüá∑ –¢—É—Ä—Ü–∏—è" },
    { code: "+971", country: "üá¶üá™ –û–ê–≠" },
    // –º–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç—å –¥–æ –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ ISO –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏
  ];

  // --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏ ---
  useEffect(() => {
    supabase.auth.getSession().then(({ data }) => {
      setSession(data.session);
    });
    supabase.auth.onAuthStateChange((_event, session) => {
      setSession(session);
    });
  }, []);

  // --- –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ ---
  useEffect(() => {
    if (session) fetchClients();
  }, [session]);

  async function fetchClients() {
    const { data, error } = await supabase
      .from("CRM")
      .select("*")
      .eq("user_id", session.user.id)
      .order("created_at", { ascending: false });

    if (error) console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ:", error);
    else setClients(data);
  }

  // === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ ===
  async function saveClient() {
    if (!form.full_name.trim()) {
      alert("–ü–æ–ª–µ '–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ");
      return;
    }

    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (form.email && !emailRegex.test(form.email)) {
      alert("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email");
      return;
    }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
    const phoneRegex = /^[0-9]*$/;
    if (!phoneRegex.test(form.phone)) {
      alert("–¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã");
      return;
    }

        // –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    const fullPhone =
      form.phone.length > 0 ? `${form.countryCode}${form.phone}` : "";

    setLoading(true);

    let error;
    if (editingId) {
      ({ error } = await supabase
        .from("CRM")
        .update({
          full_name: form.full_name,
          email: form.email,
          phone: fullPhone,
          company: form.company,
          notes: form.notes,
        })
        .eq("id", editingId)
        .eq("user_id", session.user.id));
    } else {
      ({ error } = await supabase.from("CRM").insert([
        {
          user_id: session.user.id,
          full_name: form.full_name,
          email: form.email,
          phone: fullPhone,
          company: form.company,
          notes: form.notes,
        },
      ]));
    }

    setLoading(false);

    if (error) alert("–û—à–∏–±–∫–∞: " + error.message);
    else {
      resetForm();
      fetchClients();
    }
  }

  // === –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ ===
  function editClient(client) {
    setForm({
      full_name: client.full_name || "",
      email: client.email || "",
      countryCode: client.phone ? client.phone.match(/^\+\d+/)?.[0] || "+7" : "+7",
      phone: client.phone ? client.phone.replace(/^\+\d+/, "") : "",
      company: client.company || "",
      notes: client.notes || "",
    });
    setEditingId(client.id);
  }

  // === –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ ===
  async function deleteClient(id) {
    if (!confirm("–£–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞?")) return;
    const { error } = await supabase
      .from("CRM")
      .delete()
      .eq("id", id)
      .eq("user_id", session.user.id);
    if (error) alert("–û—à–∏–±–∫–∞: " + error.message);
    else fetchClients();
  }

  // === –†–∞–∑–ª–æ–≥–∏–Ω ===
  async function logout() {
    await supabase.auth.signOut();
    setSession(null);
  }

  // === –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã ===
  function resetForm() {
    setForm({
      full_name: "",
      email: "",
      countryCode: "+7",
      phone: "",
      company: "",
      notes: "",
    });
    setEditingId(null);
  }

  // === –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å ===
  if (!session)
  return (
    <div style={{ maxWidth: 400, margin: "80px auto", textAlign: "center" }}>
      <h2>üîê –í—Ö–æ–¥ –≤ CRM</h2>
      <p style={{ marginBottom: 20 }}>
        –í–æ–π–¥–∏—Ç–µ —Å –ø–æ–º–æ—â—å—é email ‚Äî —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –ø—Ä–∏–¥—ë—Ç –Ω–∞ –ø–æ—á—Ç—É.
      </p>
      <Auth
        supabaseClient={supabase}
        appearance={{ theme: ThemeSupa }}
        providers={[]}
        magicLink
      />
    </div>
  );

  return (
    <div
      style={{
        fontFamily: "sans-serif",
        maxWidth: 900,
        margin: "40px auto",
        background: "#f5f5f5",
        padding: 20,
        borderRadius: 10,
      }}
    >
      <div style={{ display: "flex", justifyContent: "space-between" }}>
        <h1>CRM ‚Äî –ö–ª–∏–µ–Ω—Ç—ã</h1>
        <button onClick={logout}>–í—ã–π—Ç–∏</button>
      </div>

      {/* === –§–û–†–ú–ê –î–û–ë–ê–í–õ–ï–ù–ò–Ø === */}
      <div style={{ marginBottom: 30, display: "flex", flexDirection: "column", gap: 8 }}>
        <input
          placeholder="–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ *"
          value={form.full_name}
          onChange={(e) => setForm({ ...form, full_name: e.target.value })}
        />
        <input
          placeholder="Email"
          value={form.email}
          onChange={(e) => setForm({ ...form, email: e.target.value })}
        />
        <div style={{ display: "flex", gap: 8 }}>
          <select
            style={{ width: "150px" }}
            value={form.countryCode}
            onChange={(e) => setForm({ ...form, countryCode: e.target.value })}
          >
            {countryCodes.map((c) => (
              <option key={c.code} value={c.code}>
                {c.country} ({c.code})
              </option>
            ))}
          </select>
          <input
            placeholder="–¢–µ–ª–µ—Ñ–æ–Ω"
            value={form.phone}
            onChange={(e) =>
              setForm({
                ...form,
                phone: e.target.value.replace(/\D/g, ""),
              })
            }
          />
        </div>
        <input
          placeholder="–ö–æ–º–ø–∞–Ω–∏—è"
          value={form.company}
          onChange={(e) => setForm({ ...form, company: e.target.value })}
        />
        <input
          placeholder="–ó–∞–º–µ—Ç–∫–∏"
          value={form.notes}
          onChange={(e) => setForm({ ...form, notes: e.target.value })}
        />
        <div style={{ display: "flex", gap: 10 }}>
          <button onClick={saveClient} disabled={loading}>
            {loading ? "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ..." : editingId ? "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è" : "–î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞"}
          </button>
          {editingId && <button onClick={resetForm}>–û—Ç–º–µ–Ω–∞</button>}
        </div>
      </div>

      {/* === –°–ü–ò–°–û–ö –ö–õ–ò–ï–ù–¢–û–í === */}
      <table border="1" cellPadding="6" style={{ width: "100%", background: "white" }}>
        <thead>
          <tr>
            <th>–ò–º—è</th>
            <th>Email</th>
            <th>–¢–µ–ª–µ—Ñ–æ–Ω</th>
            <th>–ö–æ–º–ø–∞–Ω–∏—è</th>
            <th>–ó–∞–º–µ—Ç–∫–∏</th>
            <th></th>
          </tr>
        </thead>
        <tbody>
          {clients.length === 0 ? (
            <tr>
              <td colSpan="6" style={{ textAlign: "center" }}>
                –ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤
              </td>
            </tr>
          ) : (
            clients.map((c) => (
              <tr key={c.id}>
                <td>{c.full_name}</td>
                <td>{c.email}</td>
                <td>{c.phone}</td>
                <td>{c.company}</td>
                <td>{c.notes}</td>
                <td>
                  <button onClick={() => editClient(c)}>‚úèÔ∏è</button>{" "}
                  <button onClick={() => deleteClient(c.id)}>üóëÔ∏è</button>
                </td>
              </tr>
            ))
          )}
        </tbody>
      </table>
    </div>
  );
}
